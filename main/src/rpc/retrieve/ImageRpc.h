// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ImageRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ImageRpc_h__
#define __ImageRpc_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RPCImgRecong
{

class ImgRetrieval;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RPCImgRecong::ImgRetrieval>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RPCImgRecong::ImgRetrieval*);

}

}

namespace RPCImgRecong
{

class ImgRetrieval;
bool operator==(const ImgRetrieval&, const ImgRetrieval&);
bool operator<(const ImgRetrieval&, const ImgRetrieval&);
::Ice::Object* upCast(::RPCImgRecong::ImgRetrieval*);
typedef ::IceInternal::Handle< ::RPCImgRecong::ImgRetrieval> ImgRetrievalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RPCImgRecong::ImgRetrieval> ImgRetrievalPrx;
void __patch(ImgRetrievalPtr&, const ::Ice::ObjectPtr&);

}

namespace RPCImgRecong
{

struct WordWiki
{
    ::std::string key;
    ::std::string abstr;
    ::std::string descr;

    bool operator==(const WordWiki& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(key != __rhs.key)
        {
            return false;
        }
        if(abstr != __rhs.abstr)
        {
            return false;
        }
        if(descr != __rhs.descr)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WordWiki& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(key < __rhs.key)
        {
            return true;
        }
        else if(__rhs.key < key)
        {
            return false;
        }
        if(abstr < __rhs.abstr)
        {
            return true;
        }
        else if(__rhs.abstr < abstr)
        {
            return false;
        }
        if(descr < __rhs.descr)
        {
            return true;
        }
        else if(__rhs.descr < descr)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WordWiki& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const WordWiki& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const WordWiki& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const WordWiki& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::std::string> ListString;

typedef ::std::map< ::std::string, ::std::string> DictStr2Str;

struct ImgRes
{
    ::Ice::Int status;
    ::RPCImgRecong::ListString imgRemote;
    ::RPCImgRecong::ListString imgPic;
};

struct WordRes
{
    ::Ice::Int status;
    ::RPCImgRecong::ListString keyWords;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RPCImgRecong::WordWiki>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCImgRecong::WordWiki, S>
{
    static void write(S* __os, const ::RPCImgRecong::WordWiki& v)
    {
        __os->write(v.key);
        __os->write(v.abstr);
        __os->write(v.descr);
    }
};

template<class S>
struct StreamReader< ::RPCImgRecong::WordWiki, S>
{
    static void read(S* __is, ::RPCImgRecong::WordWiki& v)
    {
        __is->read(v.key);
        __is->read(v.abstr);
        __is->read(v.descr);
    }
};

template<>
struct StreamableTraits< ::RPCImgRecong::ImgRes>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCImgRecong::ImgRes, S>
{
    static void write(S* __os, const ::RPCImgRecong::ImgRes& v)
    {
        __os->write(v.status);
        __os->write(v.imgRemote);
        __os->write(v.imgPic);
    }
};

template<class S>
struct StreamReader< ::RPCImgRecong::ImgRes, S>
{
    static void read(S* __is, ::RPCImgRecong::ImgRes& v)
    {
        __is->read(v.status);
        __is->read(v.imgRemote);
        __is->read(v.imgPic);
    }
};

template<>
struct StreamableTraits< ::RPCImgRecong::WordRes>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCImgRecong::WordRes, S>
{
    static void write(S* __os, const ::RPCImgRecong::WordRes& v)
    {
        __os->write(v.status);
        __os->write(v.keyWords);
    }
};

template<class S>
struct StreamReader< ::RPCImgRecong::WordRes, S>
{
    static void read(S* __is, ::RPCImgRecong::WordRes& v)
    {
        __is->read(v.status);
        __is->read(v.keyWords);
    }
};

}

namespace RPCImgRecong
{

class Callback_ImgRetrieval_wordGetKnowledge_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_wordGetKnowledge_Base> Callback_ImgRetrieval_wordGetKnowledgePtr;

class Callback_ImgRetrieval_wordSearch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_wordSearch_Base> Callback_ImgRetrieval_wordSearchPtr;

class Callback_ImgRetrieval_wordSearchImg_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_wordSearchImg_Base> Callback_ImgRetrieval_wordSearchImgPtr;

class Callback_ImgRetrieval_imgSearchAsync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_imgSearchAsync_Base> Callback_ImgRetrieval_imgSearchAsyncPtr;

class Callback_ImgRetrieval_fetchImgSearchResult_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_fetchImgSearchResult_Base> Callback_ImgRetrieval_fetchImgSearchResultPtr;

class Callback_ImgRetrieval_imgSearchSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgRetrieval_imgSearchSync_Base> Callback_ImgRetrieval_imgSearchSyncPtr;

}

namespace IceProxy
{

namespace RPCImgRecong
{

class ImgRetrieval : virtual public ::IceProxy::Ice::Object
{
public:

    ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string& word)
    {
        return wordGetKnowledge(word, 0);
    }
    ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx)
    {
        return wordGetKnowledge(word, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_wordGetKnowledge(const ::std::string& word, const ::IceInternal::Function<void (const ::RPCImgRecong::WordWiki&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordGetKnowledge(word, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordGetKnowledge(const ::std::string& word, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordGetKnowledge(word, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::WordWiki&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordGetKnowledge(word, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordGetKnowledge(word, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::WordWiki&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCImgRecong::WordWiki&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::RPCImgRecong::WordWiki __ret;
                try
                {
                    __ret = __proxy->end_wordGetKnowledge(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCImgRecong::WordWiki&)> _response;
        };
        return begin_wordGetKnowledge(word, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word)
    {
        return begin_wordGetKnowledge(word, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx)
    {
        return begin_wordGetKnowledge(word, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordGetKnowledge(word, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordGetKnowledge(word, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word, const ::RPCImgRecong::Callback_ImgRetrieval_wordGetKnowledgePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordGetKnowledge(word, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string& word, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_wordGetKnowledgePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordGetKnowledge(word, &__ctx, __del, __cookie);
    }

    ::RPCImgRecong::WordWiki end_wordGetKnowledge(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_wordGetKnowledge(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return wordSearch(mapArg, 0);
    }
    ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return wordSearch(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::RPCImgRecong::WordRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordSearch(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordSearch(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::WordRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordSearch(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordSearch(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::WordRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCImgRecong::WordRes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::RPCImgRecong::WordRes __ret;
                try
                {
                    __ret = __proxy->end_wordSearch(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCImgRecong::WordRes&)> _response;
        };
        return begin_wordSearch(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return begin_wordSearch(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_wordSearch(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearch(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearch(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::RPCImgRecong::Callback_ImgRetrieval_wordSearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearch(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_wordSearchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearch(mapArg, &__ctx, __del, __cookie);
    }

    ::RPCImgRecong::WordRes end_wordSearch(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return wordSearchImg(mapArg, 0);
    }
    ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return wordSearchImg(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordSearchImg(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordSearchImg(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_wordSearchImg(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_wordSearchImg(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCImgRecong::ImgRes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::RPCImgRecong::ImgRes __ret;
                try
                {
                    __ret = __proxy->end_wordSearchImg(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCImgRecong::ImgRes&)> _response;
        };
        return begin_wordSearchImg(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return begin_wordSearchImg(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_wordSearchImg(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearchImg(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearchImg(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::RPCImgRecong::Callback_ImgRetrieval_wordSearchImgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearchImg(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_wordSearchImgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_wordSearchImg(mapArg, &__ctx, __del, __cookie);
    }

    ::RPCImgRecong::ImgRes end_wordSearchImg(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return imgSearchAsync(mapArg, 0);
    }
    ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return imgSearchAsync(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_imgSearchAsync(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imgSearchAsync(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_imgSearchAsync(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imgSearchAsync(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_imgSearchAsync(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_imgSearchAsync(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return begin_imgSearchAsync(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_imgSearchAsync(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchAsync(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchAsync(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::RPCImgRecong::Callback_ImgRetrieval_imgSearchAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchAsync(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_imgSearchAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchAsync(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_imgSearchAsync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return fetchImgSearchResult(mapArg, 0);
    }
    ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return fetchImgSearchResult(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchImgSearchResult(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchImgSearchResult(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchImgSearchResult(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchImgSearchResult(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCImgRecong::ImgRes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::RPCImgRecong::ImgRes __ret;
                try
                {
                    __ret = __proxy->end_fetchImgSearchResult(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCImgRecong::ImgRes&)> _response;
        };
        return begin_fetchImgSearchResult(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return begin_fetchImgSearchResult(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_fetchImgSearchResult(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchImgSearchResult(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchImgSearchResult(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::RPCImgRecong::Callback_ImgRetrieval_fetchImgSearchResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchImgSearchResult(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_fetchImgSearchResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchImgSearchResult(mapArg, &__ctx, __del, __cookie);
    }

    ::RPCImgRecong::ImgRes end_fetchImgSearchResult(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return imgSearchSync(mapArg, 0);
    }
    ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return imgSearchSync(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_imgSearchSync(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imgSearchSync(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_imgSearchSync(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_imgSearchSync(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCImgRecong::ImgRes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCImgRecong::ImgRes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
                ::RPCImgRecong::ImgRes __ret;
                try
                {
                    __ret = __proxy->end_imgSearchSync(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCImgRecong::ImgRes&)> _response;
        };
        return begin_imgSearchSync(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg)
    {
        return begin_imgSearchSync(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_imgSearchSync(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchSync(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchSync(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::RPCImgRecong::Callback_ImgRetrieval_imgSearchSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchSync(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str& mapArg, const ::Ice::Context& __ctx, const ::RPCImgRecong::Callback_ImgRetrieval_imgSearchSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_imgSearchSync(mapArg, &__ctx, __del, __cookie);
    }

    ::RPCImgRecong::ImgRes end_imgSearchSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_twoway() const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_oneway() const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_batchOneway() const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_datagram() const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_batchDatagram() const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImgRetrieval> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImgRetrieval*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RPCImgRecong
{

class ImgRetrieval : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RPCImgRecong
{

class ImgRetrieval : virtual public ::IceDelegate::RPCImgRecong::ImgRetrieval,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RPCImgRecong
{

class ImgRetrieval : virtual public ::IceDelegate::RPCImgRecong::ImgRetrieval,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RPCImgRecong
{

class ImgRetrieval : virtual public ::Ice::Object
{
public:

    typedef ImgRetrievalPrx ProxyType;
    typedef ImgRetrievalPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RPCImgRecong::WordWiki wordGetKnowledge(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___wordGetKnowledge(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCImgRecong::WordRes wordSearch(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___wordSearch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCImgRecong::ImgRes wordSearchImg(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___wordSearchImg(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int imgSearchAsync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___imgSearchAsync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCImgRecong::ImgRes fetchImgSearchResult(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fetchImgSearchResult(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCImgRecong::ImgRes imgSearchSync(const ::RPCImgRecong::DictStr2Str&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___imgSearchSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ImgRetrieval& l, const ImgRetrieval& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImgRetrieval& l, const ImgRetrieval& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RPCImgRecong
{

template<class T>
class CallbackNC_ImgRetrieval_wordGetKnowledge : public Callback_ImgRetrieval_wordGetKnowledge_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCImgRecong::WordWiki&);

    CallbackNC_ImgRetrieval_wordGetKnowledge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::WordWiki __ret;
        try
        {
            __ret = __proxy->end_wordGetKnowledge(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_wordGetKnowledgePtr
newCallback_ImgRetrieval_wordGetKnowledge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::WordWiki&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordGetKnowledge<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_wordGetKnowledgePtr
newCallback_ImgRetrieval_wordGetKnowledge(T* instance, void (T::*cb)(const ::RPCImgRecong::WordWiki&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordGetKnowledge<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_wordGetKnowledge : public Callback_ImgRetrieval_wordGetKnowledge_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCImgRecong::WordWiki&, const CT&);

    Callback_ImgRetrieval_wordGetKnowledge(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::WordWiki __ret;
        try
        {
            __ret = __proxy->end_wordGetKnowledge(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_wordGetKnowledgePtr
newCallback_ImgRetrieval_wordGetKnowledge(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::WordWiki&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordGetKnowledge<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_wordGetKnowledgePtr
newCallback_ImgRetrieval_wordGetKnowledge(T* instance, void (T::*cb)(const ::RPCImgRecong::WordWiki&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordGetKnowledge<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgRetrieval_wordSearch : public Callback_ImgRetrieval_wordSearch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCImgRecong::WordRes&);

    CallbackNC_ImgRetrieval_wordSearch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::WordRes __ret;
        try
        {
            __ret = __proxy->end_wordSearch(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_wordSearchPtr
newCallback_ImgRetrieval_wordSearch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::WordRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordSearch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_wordSearchPtr
newCallback_ImgRetrieval_wordSearch(T* instance, void (T::*cb)(const ::RPCImgRecong::WordRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordSearch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_wordSearch : public Callback_ImgRetrieval_wordSearch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCImgRecong::WordRes&, const CT&);

    Callback_ImgRetrieval_wordSearch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::WordRes __ret;
        try
        {
            __ret = __proxy->end_wordSearch(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_wordSearchPtr
newCallback_ImgRetrieval_wordSearch(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::WordRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordSearch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_wordSearchPtr
newCallback_ImgRetrieval_wordSearch(T* instance, void (T::*cb)(const ::RPCImgRecong::WordRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordSearch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgRetrieval_wordSearchImg : public Callback_ImgRetrieval_wordSearchImg_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&);

    CallbackNC_ImgRetrieval_wordSearchImg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_wordSearchImg(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_wordSearchImgPtr
newCallback_ImgRetrieval_wordSearchImg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordSearchImg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_wordSearchImgPtr
newCallback_ImgRetrieval_wordSearchImg(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_wordSearchImg<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_wordSearchImg : public Callback_ImgRetrieval_wordSearchImg_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&, const CT&);

    Callback_ImgRetrieval_wordSearchImg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_wordSearchImg(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_wordSearchImgPtr
newCallback_ImgRetrieval_wordSearchImg(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordSearchImg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_wordSearchImgPtr
newCallback_ImgRetrieval_wordSearchImg(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_wordSearchImg<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgRetrieval_imgSearchAsync : public Callback_ImgRetrieval_imgSearchAsync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgRetrieval_imgSearchAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_imgSearchAsync(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_imgSearchAsyncPtr
newCallback_ImgRetrieval_imgSearchAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_imgSearchAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_imgSearchAsyncPtr
newCallback_ImgRetrieval_imgSearchAsync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_imgSearchAsync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_imgSearchAsync : public Callback_ImgRetrieval_imgSearchAsync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgRetrieval_imgSearchAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_imgSearchAsync(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_imgSearchAsyncPtr
newCallback_ImgRetrieval_imgSearchAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_imgSearchAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_imgSearchAsyncPtr
newCallback_ImgRetrieval_imgSearchAsync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_imgSearchAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgRetrieval_fetchImgSearchResult : public Callback_ImgRetrieval_fetchImgSearchResult_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&);

    CallbackNC_ImgRetrieval_fetchImgSearchResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_fetchImgSearchResult(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_fetchImgSearchResultPtr
newCallback_ImgRetrieval_fetchImgSearchResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_fetchImgSearchResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_fetchImgSearchResultPtr
newCallback_ImgRetrieval_fetchImgSearchResult(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_fetchImgSearchResult<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_fetchImgSearchResult : public Callback_ImgRetrieval_fetchImgSearchResult_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&, const CT&);

    Callback_ImgRetrieval_fetchImgSearchResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_fetchImgSearchResult(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_fetchImgSearchResultPtr
newCallback_ImgRetrieval_fetchImgSearchResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_fetchImgSearchResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_fetchImgSearchResultPtr
newCallback_ImgRetrieval_fetchImgSearchResult(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_fetchImgSearchResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgRetrieval_imgSearchSync : public Callback_ImgRetrieval_imgSearchSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&);

    CallbackNC_ImgRetrieval_imgSearchSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_imgSearchSync(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ImgRetrieval_imgSearchSyncPtr
newCallback_ImgRetrieval_imgSearchSync(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_imgSearchSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgRetrieval_imgSearchSyncPtr
newCallback_ImgRetrieval_imgSearchSync(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgRetrieval_imgSearchSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgRetrieval_imgSearchSync : public Callback_ImgRetrieval_imgSearchSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCImgRecong::ImgRes&, const CT&);

    Callback_ImgRetrieval_imgSearchSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCImgRecong::ImgRetrievalPrx __proxy = ::RPCImgRecong::ImgRetrievalPrx::uncheckedCast(__result->getProxy());
        ::RPCImgRecong::ImgRes __ret;
        try
        {
            __ret = __proxy->end_imgSearchSync(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ImgRetrieval_imgSearchSyncPtr
newCallback_ImgRetrieval_imgSearchSync(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_imgSearchSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgRetrieval_imgSearchSyncPtr
newCallback_ImgRetrieval_imgSearchSync(T* instance, void (T::*cb)(const ::RPCImgRecong::ImgRes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgRetrieval_imgSearchSync<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
