// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `wisefuseRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "wisefuseRpc.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RPCWiseFuse__WiseFusionInf__geneThumbImg_name = "geneThumbImg";

const ::std::string __RPCWiseFuse__WiseFusionInf__fuseSyn_name = "fuseSyn";

const ::std::string __RPCWiseFuse__WiseFusionInf__fuseAsyn_name = "fuseAsyn";

const ::std::string __RPCWiseFuse__WiseFusionInf__askProcess_name = "askProcess";

const ::std::string __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name = "fetchFuseRes";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RPCWiseFuse::upCast(::IceProxy::RPCWiseFuse::WiseFusionInf* p) { return p; }

void
::IceProxy::RPCWiseFuse::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RPCWiseFuse::WiseFusionInf>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RPCWiseFuse::WiseFusionInf;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::RPCWiseFuse::WiseFusionInf::geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RPCWiseFuse__WiseFusionInf__geneThumbImg_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RPCWiseFuse__WiseFusionInf__geneThumbImg_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RPCWiseFuse::WiseFusionInf* __del = dynamic_cast< ::IceDelegate::RPCWiseFuse::WiseFusionInf*>(__delBase.get());
            return __del->geneThumbImg(inPath, outPath, bandlist, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RPCWiseFuse::WiseFusionInf::begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RPCWiseFuse__WiseFusionInf__geneThumbImg_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RPCWiseFuse__WiseFusionInf__geneThumbImg_name, __del, __cookie);
    try
    {
        __result->__prepare(__RPCWiseFuse__WiseFusionInf__geneThumbImg_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(inPath);
        __os->write(outPath);
        __os->write(bandlist);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::RPCWiseFuse::WiseFusionInf::end_geneThumbImg(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RPCWiseFuse__WiseFusionInf__geneThumbImg_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RPCWiseFuse::FusionInf
IceProxy::RPCWiseFuse::WiseFusionInf::fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RPCWiseFuse__WiseFusionInf__fuseSyn_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RPCWiseFuse__WiseFusionInf__fuseSyn_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RPCWiseFuse::WiseFusionInf* __del = dynamic_cast< ::IceDelegate::RPCWiseFuse::WiseFusionInf*>(__delBase.get());
            return __del->fuseSyn(mapArgs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RPCWiseFuse::WiseFusionInf::begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RPCWiseFuse__WiseFusionInf__fuseSyn_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RPCWiseFuse__WiseFusionInf__fuseSyn_name, __del, __cookie);
    try
    {
        __result->__prepare(__RPCWiseFuse__WiseFusionInf__fuseSyn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RPCWiseFuse::FusionInf
IceProxy::RPCWiseFuse::WiseFusionInf::end_fuseSyn(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RPCWiseFuse__WiseFusionInf__fuseSyn_name);
    ::RPCWiseFuse::FusionInf __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::RPCWiseFuse::WiseFusionInf::fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RPCWiseFuse__WiseFusionInf__fuseAsyn_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RPCWiseFuse__WiseFusionInf__fuseAsyn_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RPCWiseFuse::WiseFusionInf* __del = dynamic_cast< ::IceDelegate::RPCWiseFuse::WiseFusionInf*>(__delBase.get());
            return __del->fuseAsyn(mapArgs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RPCWiseFuse::WiseFusionInf::begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RPCWiseFuse__WiseFusionInf__fuseAsyn_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RPCWiseFuse__WiseFusionInf__fuseAsyn_name, __del, __cookie);
    try
    {
        __result->__prepare(__RPCWiseFuse__WiseFusionInf__fuseAsyn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::RPCWiseFuse::WiseFusionInf::end_fuseAsyn(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RPCWiseFuse__WiseFusionInf__fuseAsyn_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::RPCWiseFuse::WiseFusionInf::askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RPCWiseFuse__WiseFusionInf__askProcess_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RPCWiseFuse__WiseFusionInf__askProcess_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RPCWiseFuse::WiseFusionInf* __del = dynamic_cast< ::IceDelegate::RPCWiseFuse::WiseFusionInf*>(__delBase.get());
            return __del->askProcess(mapArgs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RPCWiseFuse::WiseFusionInf::begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RPCWiseFuse__WiseFusionInf__askProcess_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RPCWiseFuse__WiseFusionInf__askProcess_name, __del, __cookie);
    try
    {
        __result->__prepare(__RPCWiseFuse__WiseFusionInf__askProcess_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::RPCWiseFuse::WiseFusionInf::end_askProcess(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RPCWiseFuse__WiseFusionInf__askProcess_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RPCWiseFuse::FusionInf
IceProxy::RPCWiseFuse::WiseFusionInf::fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RPCWiseFuse__WiseFusionInf__fetchFuseRes_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RPCWiseFuse::WiseFusionInf* __del = dynamic_cast< ::IceDelegate::RPCWiseFuse::WiseFusionInf*>(__delBase.get());
            return __del->fetchFuseRes(mapArg, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RPCWiseFuse::WiseFusionInf::begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RPCWiseFuse__WiseFusionInf__fetchFuseRes_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name, __del, __cookie);
    try
    {
        __result->__prepare(__RPCWiseFuse__WiseFusionInf__fetchFuseRes_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArg);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RPCWiseFuse::FusionInf
IceProxy::RPCWiseFuse::WiseFusionInf::end_fetchFuseRes(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name);
    ::RPCWiseFuse::FusionInf __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RPCWiseFuse::WiseFusionInf::ice_staticId()
{
    return ::RPCWiseFuse::WiseFusionInf::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RPCWiseFuse::WiseFusionInf::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RPCWiseFuse::WiseFusionInf);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RPCWiseFuse::WiseFusionInf::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RPCWiseFuse::WiseFusionInf);
}

::IceProxy::Ice::Object*
IceProxy::RPCWiseFuse::WiseFusionInf::__newInstance() const
{
    return new WiseFusionInf;
}

bool
IceDelegateM::RPCWiseFuse::WiseFusionInf::geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RPCWiseFuse__WiseFusionInf__geneThumbImg_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(inPath);
        __os->write(outPath);
        __os->write(bandlist);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RPCWiseFuse::FusionInf
IceDelegateM::RPCWiseFuse::WiseFusionInf::fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RPCWiseFuse__WiseFusionInf__fuseSyn_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RPCWiseFuse::FusionInf __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::RPCWiseFuse::WiseFusionInf::fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RPCWiseFuse__WiseFusionInf__fuseAsyn_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::RPCWiseFuse::WiseFusionInf::askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RPCWiseFuse__WiseFusionInf__askProcess_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArgs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RPCWiseFuse::FusionInf
IceDelegateM::RPCWiseFuse::WiseFusionInf::fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(mapArg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RPCWiseFuse::FusionInf __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateD::RPCWiseFuse::WiseFusionInf::geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_inPath, const ::std::string& __p_outPath, const ::std::string& __p_bandlist, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_inPath(__p_inPath),
            _m_outPath(__p_outPath),
            _m_bandlist(__p_bandlist)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RPCWiseFuse::WiseFusionInf* servant = dynamic_cast< ::RPCWiseFuse::WiseFusionInf*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->geneThumbImg(_m_inPath, _m_outPath, _m_bandlist, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_inPath;
        const ::std::string& _m_outPath;
        const ::std::string& _m_bandlist;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RPCWiseFuse__WiseFusionInf__geneThumbImg_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, inPath, outPath, bandlist, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RPCWiseFuse::FusionInf
IceDelegateD::RPCWiseFuse::WiseFusionInf::fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RPCWiseFuse::FusionInf& __result, const ::RPCWiseFuse::DirArgs& __p_mapArgs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mapArgs(__p_mapArgs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RPCWiseFuse::WiseFusionInf* servant = dynamic_cast< ::RPCWiseFuse::WiseFusionInf*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fuseSyn(_m_mapArgs, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RPCWiseFuse::FusionInf& _result;
        const ::RPCWiseFuse::DirArgs& _m_mapArgs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RPCWiseFuse__WiseFusionInf__fuseSyn_name, ::Ice::Normal, __context);
    ::RPCWiseFuse::FusionInf __result;
    try
    {
        _DirectI __direct(__result, mapArgs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::RPCWiseFuse::WiseFusionInf::fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::RPCWiseFuse::DirArgs& __p_mapArgs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mapArgs(__p_mapArgs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RPCWiseFuse::WiseFusionInf* servant = dynamic_cast< ::RPCWiseFuse::WiseFusionInf*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fuseAsyn(_m_mapArgs, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::RPCWiseFuse::DirArgs& _m_mapArgs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RPCWiseFuse__WiseFusionInf__fuseAsyn_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, mapArgs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::RPCWiseFuse::WiseFusionInf::askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::RPCWiseFuse::DirArgs& __p_mapArgs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mapArgs(__p_mapArgs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RPCWiseFuse::WiseFusionInf* servant = dynamic_cast< ::RPCWiseFuse::WiseFusionInf*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->askProcess(_m_mapArgs, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::RPCWiseFuse::DirArgs& _m_mapArgs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RPCWiseFuse__WiseFusionInf__askProcess_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, mapArgs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RPCWiseFuse::FusionInf
IceDelegateD::RPCWiseFuse::WiseFusionInf::fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RPCWiseFuse::FusionInf& __result, const ::RPCWiseFuse::DirArgs& __p_mapArg, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mapArg(__p_mapArg)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RPCWiseFuse::WiseFusionInf* servant = dynamic_cast< ::RPCWiseFuse::WiseFusionInf*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->fetchFuseRes(_m_mapArg, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::RPCWiseFuse::FusionInf& _result;
        const ::RPCWiseFuse::DirArgs& _m_mapArg;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RPCWiseFuse__WiseFusionInf__fetchFuseRes_name, ::Ice::Normal, __context);
    ::RPCWiseFuse::FusionInf __result;
    try
    {
        _DirectI __direct(__result, mapArg, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* RPCWiseFuse::upCast(::RPCWiseFuse::WiseFusionInf* p) { return p; }

namespace
{
const ::std::string __RPCWiseFuse__WiseFusionInf_ids[2] =
{
    "::Ice::Object",
    "::RPCWiseFuse::WiseFusionInf"
};

}

bool
RPCWiseFuse::WiseFusionInf::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RPCWiseFuse__WiseFusionInf_ids, __RPCWiseFuse__WiseFusionInf_ids + 2, _s);
}

::std::vector< ::std::string>
RPCWiseFuse::WiseFusionInf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RPCWiseFuse__WiseFusionInf_ids[0], &__RPCWiseFuse__WiseFusionInf_ids[2]);
}

const ::std::string&
RPCWiseFuse::WiseFusionInf::ice_id(const ::Ice::Current&) const
{
    return __RPCWiseFuse__WiseFusionInf_ids[1];
}

const ::std::string&
RPCWiseFuse::WiseFusionInf::ice_staticId()
{
    return __RPCWiseFuse__WiseFusionInf_ids[1];
}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::___geneThumbImg(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string inPath;
    ::std::string outPath;
    ::std::string bandlist;
    __is->read(inPath);
    __is->read(outPath);
    __is->read(bandlist);
    __inS.endReadParams();
    bool __ret = geneThumbImg(inPath, outPath, bandlist, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::___fuseSyn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RPCWiseFuse::DirArgs mapArgs;
    __is->read(mapArgs);
    __inS.endReadParams();
    ::RPCWiseFuse::FusionInf __ret = fuseSyn(mapArgs, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::___fuseAsyn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RPCWiseFuse::DirArgs mapArgs;
    __is->read(mapArgs);
    __inS.endReadParams();
    ::Ice::Int __ret = fuseAsyn(mapArgs, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::___askProcess(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RPCWiseFuse::DirArgs mapArgs;
    __is->read(mapArgs);
    __inS.endReadParams();
    ::std::string __ret = askProcess(mapArgs, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::___fetchFuseRes(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RPCWiseFuse::DirArgs mapArg;
    __is->read(mapArg);
    __inS.endReadParams();
    ::RPCWiseFuse::FusionInf __ret = fetchFuseRes(mapArg, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RPCWiseFuse__WiseFusionInf_all[] =
{
    "askProcess",
    "fetchFuseRes",
    "fuseAsyn",
    "fuseSyn",
    "geneThumbImg",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
RPCWiseFuse::WiseFusionInf::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RPCWiseFuse__WiseFusionInf_all, __RPCWiseFuse__WiseFusionInf_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RPCWiseFuse__WiseFusionInf_all)
    {
        case 0:
        {
            return ___askProcess(in, current);
        }
        case 1:
        {
            return ___fetchFuseRes(in, current);
        }
        case 2:
        {
            return ___fuseAsyn(in, current);
        }
        case 3:
        {
            return ___fuseSyn(in, current);
        }
        case 4:
        {
            return ___geneThumbImg(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RPCWiseFuse::WiseFusionInf::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RPCWiseFuse::WiseFusionInf::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RPCWiseFuse::__patch(WiseFusionInfPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RPCWiseFuse::WiseFusionInfPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RPCWiseFuse::WiseFusionInf::ice_staticId(), v);
    }
}
