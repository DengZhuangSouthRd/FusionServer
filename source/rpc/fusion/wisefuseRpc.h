// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `wisefuseRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __wisefuseRpc_h__
#define __wisefuseRpc_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RPCWiseFuse
{

class WiseFusionInf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RPCWiseFuse::WiseFusionInf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RPCWiseFuse::WiseFusionInf*);

}

}

namespace RPCWiseFuse
{

class WiseFusionInf;
bool operator==(const WiseFusionInf&, const WiseFusionInf&);
bool operator<(const WiseFusionInf&, const WiseFusionInf&);
::Ice::Object* upCast(::RPCWiseFuse::WiseFusionInf*);
typedef ::IceInternal::Handle< ::RPCWiseFuse::WiseFusionInf> WiseFusionInfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RPCWiseFuse::WiseFusionInf> WiseFusionInfPrx;
void __patch(WiseFusionInfPtr&, const ::Ice::ObjectPtr&);

}

namespace RPCWiseFuse
{

struct FusionInf
{
    ::Ice::Double cnttimeuse;
    ::std::string producetime;
    ::Ice::Double ulcoorvalidLongitude;
    ::Ice::Double ulcoorvalidLatitude;
    ::Ice::Double brcoorvalidLongitude;
    ::Ice::Double brcoorvalidLatitude;
    ::Ice::Double ulcoorwholeLongitude;
    ::Ice::Double ulcoorwholeLatitude;
    ::Ice::Double brcoorwholeLongitude;
    ::Ice::Double brcoorwholeLatitude;
    ::Ice::Float resolution;
    ::std::string productFormat;
    ::std::string projectiontype;
    ::std::string datumname;
    ::std::string projectioncode;
    ::std::string projectionunits;
    ::Ice::Float projcentralmeridian;
    ::Ice::Int status;
};

typedef ::std::map< ::std::string, ::std::string> DirArgs;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RPCWiseFuse::FusionInf>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 90;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCWiseFuse::FusionInf, S>
{
    static void write(S* __os, const ::RPCWiseFuse::FusionInf& v)
    {
        __os->write(v.cnttimeuse);
        __os->write(v.producetime);
        __os->write(v.ulcoorvalidLongitude);
        __os->write(v.ulcoorvalidLatitude);
        __os->write(v.brcoorvalidLongitude);
        __os->write(v.brcoorvalidLatitude);
        __os->write(v.ulcoorwholeLongitude);
        __os->write(v.ulcoorwholeLatitude);
        __os->write(v.brcoorwholeLongitude);
        __os->write(v.brcoorwholeLatitude);
        __os->write(v.resolution);
        __os->write(v.productFormat);
        __os->write(v.projectiontype);
        __os->write(v.datumname);
        __os->write(v.projectioncode);
        __os->write(v.projectionunits);
        __os->write(v.projcentralmeridian);
        __os->write(v.status);
    }
};

template<class S>
struct StreamReader< ::RPCWiseFuse::FusionInf, S>
{
    static void read(S* __is, ::RPCWiseFuse::FusionInf& v)
    {
        __is->read(v.cnttimeuse);
        __is->read(v.producetime);
        __is->read(v.ulcoorvalidLongitude);
        __is->read(v.ulcoorvalidLatitude);
        __is->read(v.brcoorvalidLongitude);
        __is->read(v.brcoorvalidLatitude);
        __is->read(v.ulcoorwholeLongitude);
        __is->read(v.ulcoorwholeLatitude);
        __is->read(v.brcoorwholeLongitude);
        __is->read(v.brcoorwholeLatitude);
        __is->read(v.resolution);
        __is->read(v.productFormat);
        __is->read(v.projectiontype);
        __is->read(v.datumname);
        __is->read(v.projectioncode);
        __is->read(v.projectionunits);
        __is->read(v.projcentralmeridian);
        __is->read(v.status);
    }
};

}

namespace RPCWiseFuse
{

class Callback_WiseFusionInf_geneThumbImg_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WiseFusionInf_geneThumbImg_Base> Callback_WiseFusionInf_geneThumbImgPtr;

class Callback_WiseFusionInf_fuseSyn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WiseFusionInf_fuseSyn_Base> Callback_WiseFusionInf_fuseSynPtr;

class Callback_WiseFusionInf_fuseAsyn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WiseFusionInf_fuseAsyn_Base> Callback_WiseFusionInf_fuseAsynPtr;

class Callback_WiseFusionInf_askProcess_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WiseFusionInf_askProcess_Base> Callback_WiseFusionInf_askProcessPtr;

class Callback_WiseFusionInf_fetchFuseRes_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WiseFusionInf_fetchFuseRes_Base> Callback_WiseFusionInf_fetchFuseResPtr;

}

namespace IceProxy
{

namespace RPCWiseFuse
{

class WiseFusionInf : virtual public ::IceProxy::Ice::Object
{
public:

    bool geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist)
    {
        return geneThumbImg(inPath, outPath, bandlist, 0);
    }
    bool geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx)
    {
        return geneThumbImg(inPath, outPath, bandlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_geneThumbImg(inPath, outPath, bandlist, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_geneThumbImg(inPath, outPath, bandlist, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_geneThumbImg(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_geneThumbImg(inPath, outPath, bandlist, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::RPCWiseFuse::Callback_WiseFusionInf_geneThumbImgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string& inPath, const ::std::string& outPath, const ::std::string& bandlist, const ::Ice::Context& __ctx, const ::RPCWiseFuse::Callback_WiseFusionInf_geneThumbImgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_geneThumbImg(inPath, outPath, bandlist, &__ctx, __del, __cookie);
    }

    bool end_geneThumbImg(const ::Ice::AsyncResultPtr&);
    
private:

    bool geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return fuseSyn(mapArgs, 0);
    }
    ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return fuseSyn(mapArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fuseSyn(mapArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fuseSyn(mapArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fuseSyn(mapArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fuseSyn(mapArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCWiseFuse::FusionInf&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
                ::RPCWiseFuse::FusionInf __ret;
                try
                {
                    __ret = __proxy->end_fuseSyn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCWiseFuse::FusionInf&)> _response;
        };
        return begin_fuseSyn(mapArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return begin_fuseSyn(mapArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return begin_fuseSyn(mapArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseSyn(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseSyn(mapArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::RPCWiseFuse::Callback_WiseFusionInf_fuseSynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseSyn(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::RPCWiseFuse::Callback_WiseFusionInf_fuseSynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseSyn(mapArgs, &__ctx, __del, __cookie);
    }

    ::RPCWiseFuse::FusionInf end_fuseSyn(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return fuseAsyn(mapArgs, 0);
    }
    ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return fuseAsyn(mapArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fuseAsyn(mapArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fuseAsyn(mapArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fuseAsyn(mapArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fuseAsyn(mapArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_fuseAsyn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_fuseAsyn(mapArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return begin_fuseAsyn(mapArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return begin_fuseAsyn(mapArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseAsyn(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseAsyn(mapArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::RPCWiseFuse::Callback_WiseFusionInf_fuseAsynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseAsyn(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::RPCWiseFuse::Callback_WiseFusionInf_fuseAsynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fuseAsyn(mapArgs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_fuseAsyn(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string askProcess(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return askProcess(mapArgs, 0);
    }
    ::std::string askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return askProcess(mapArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_askProcess(mapArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_askProcess(mapArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_askProcess(mapArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_askProcess(mapArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_askProcess(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_askProcess(mapArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs)
    {
        return begin_askProcess(mapArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx)
    {
        return begin_askProcess(mapArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_askProcess(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_askProcess(mapArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::RPCWiseFuse::Callback_WiseFusionInf_askProcessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_askProcess(mapArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs& mapArgs, const ::Ice::Context& __ctx, const ::RPCWiseFuse::Callback_WiseFusionInf_askProcessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_askProcess(mapArgs, &__ctx, __del, __cookie);
    }

    ::std::string end_askProcess(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg)
    {
        return fetchFuseRes(mapArg, 0);
    }
    ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx)
    {
        return fetchFuseRes(mapArg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchFuseRes(mapArg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchFuseRes(mapArg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchFuseRes(mapArg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchFuseRes(mapArg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCWiseFuse::FusionInf&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCWiseFuse::FusionInf&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
                ::RPCWiseFuse::FusionInf __ret;
                try
                {
                    __ret = __proxy->end_fetchFuseRes(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCWiseFuse::FusionInf&)> _response;
        };
        return begin_fetchFuseRes(mapArg, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg)
    {
        return begin_fetchFuseRes(mapArg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx)
    {
        return begin_fetchFuseRes(mapArg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchFuseRes(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchFuseRes(mapArg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::RPCWiseFuse::Callback_WiseFusionInf_fetchFuseResPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchFuseRes(mapArg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs& mapArg, const ::Ice::Context& __ctx, const ::RPCWiseFuse::Callback_WiseFusionInf_fetchFuseResPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchFuseRes(mapArg, &__ctx, __del, __cookie);
    }

    ::RPCWiseFuse::FusionInf end_fetchFuseRes(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_secure(bool __secure) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_twoway() const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_oneway() const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_batchOneway() const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_datagram() const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_batchDatagram() const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_compress(bool __compress) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WiseFusionInf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WiseFusionInf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RPCWiseFuse
{

class WiseFusionInf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RPCWiseFuse
{

class WiseFusionInf : virtual public ::IceDelegate::RPCWiseFuse::WiseFusionInf,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RPCWiseFuse
{

class WiseFusionInf : virtual public ::IceDelegate::RPCWiseFuse::WiseFusionInf,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RPCWiseFuse
{

class WiseFusionInf : virtual public ::Ice::Object
{
public:

    typedef WiseFusionInfPrx ProxyType;
    typedef WiseFusionInfPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool geneThumbImg(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___geneThumbImg(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCWiseFuse::FusionInf fuseSyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fuseSyn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int fuseAsyn(const ::RPCWiseFuse::DirArgs&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fuseAsyn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string askProcess(const ::RPCWiseFuse::DirArgs&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___askProcess(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCWiseFuse::FusionInf fetchFuseRes(const ::RPCWiseFuse::DirArgs&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fetchFuseRes(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const WiseFusionInf& l, const WiseFusionInf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WiseFusionInf& l, const WiseFusionInf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RPCWiseFuse
{

template<class T>
class CallbackNC_WiseFusionInf_geneThumbImg : public Callback_WiseFusionInf_geneThumbImg_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_WiseFusionInf_geneThumbImg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_geneThumbImg(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WiseFusionInf_geneThumbImgPtr
newCallback_WiseFusionInf_geneThumbImg(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_geneThumbImg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WiseFusionInf_geneThumbImgPtr
newCallback_WiseFusionInf_geneThumbImg(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_geneThumbImg<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WiseFusionInf_geneThumbImg : public Callback_WiseFusionInf_geneThumbImg_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_WiseFusionInf_geneThumbImg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_geneThumbImg(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WiseFusionInf_geneThumbImgPtr
newCallback_WiseFusionInf_geneThumbImg(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_geneThumbImg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WiseFusionInf_geneThumbImgPtr
newCallback_WiseFusionInf_geneThumbImg(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_geneThumbImg<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WiseFusionInf_fuseSyn : public Callback_WiseFusionInf_fuseSyn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCWiseFuse::FusionInf&);

    CallbackNC_WiseFusionInf_fuseSyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::RPCWiseFuse::FusionInf __ret;
        try
        {
            __ret = __proxy->end_fuseSyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WiseFusionInf_fuseSynPtr
newCallback_WiseFusionInf_fuseSyn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fuseSyn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WiseFusionInf_fuseSynPtr
newCallback_WiseFusionInf_fuseSyn(T* instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fuseSyn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WiseFusionInf_fuseSyn : public Callback_WiseFusionInf_fuseSyn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCWiseFuse::FusionInf&, const CT&);

    Callback_WiseFusionInf_fuseSyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::RPCWiseFuse::FusionInf __ret;
        try
        {
            __ret = __proxy->end_fuseSyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WiseFusionInf_fuseSynPtr
newCallback_WiseFusionInf_fuseSyn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fuseSyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WiseFusionInf_fuseSynPtr
newCallback_WiseFusionInf_fuseSyn(T* instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fuseSyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WiseFusionInf_fuseAsyn : public Callback_WiseFusionInf_fuseAsyn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_WiseFusionInf_fuseAsyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fuseAsyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WiseFusionInf_fuseAsynPtr
newCallback_WiseFusionInf_fuseAsyn(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fuseAsyn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WiseFusionInf_fuseAsynPtr
newCallback_WiseFusionInf_fuseAsyn(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fuseAsyn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WiseFusionInf_fuseAsyn : public Callback_WiseFusionInf_fuseAsyn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_WiseFusionInf_fuseAsyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_fuseAsyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WiseFusionInf_fuseAsynPtr
newCallback_WiseFusionInf_fuseAsyn(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fuseAsyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WiseFusionInf_fuseAsynPtr
newCallback_WiseFusionInf_fuseAsyn(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fuseAsyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WiseFusionInf_askProcess : public Callback_WiseFusionInf_askProcess_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_WiseFusionInf_askProcess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_askProcess(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WiseFusionInf_askProcessPtr
newCallback_WiseFusionInf_askProcess(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_askProcess<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WiseFusionInf_askProcessPtr
newCallback_WiseFusionInf_askProcess(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_askProcess<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WiseFusionInf_askProcess : public Callback_WiseFusionInf_askProcess_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_WiseFusionInf_askProcess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_askProcess(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WiseFusionInf_askProcessPtr
newCallback_WiseFusionInf_askProcess(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_askProcess<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WiseFusionInf_askProcessPtr
newCallback_WiseFusionInf_askProcess(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_askProcess<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WiseFusionInf_fetchFuseRes : public Callback_WiseFusionInf_fetchFuseRes_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCWiseFuse::FusionInf&);

    CallbackNC_WiseFusionInf_fetchFuseRes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::RPCWiseFuse::FusionInf __ret;
        try
        {
            __ret = __proxy->end_fetchFuseRes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_WiseFusionInf_fetchFuseResPtr
newCallback_WiseFusionInf_fetchFuseRes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fetchFuseRes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WiseFusionInf_fetchFuseResPtr
newCallback_WiseFusionInf_fetchFuseRes(T* instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WiseFusionInf_fetchFuseRes<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WiseFusionInf_fetchFuseRes : public Callback_WiseFusionInf_fetchFuseRes_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCWiseFuse::FusionInf&, const CT&);

    Callback_WiseFusionInf_fetchFuseRes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCWiseFuse::WiseFusionInfPrx __proxy = ::RPCWiseFuse::WiseFusionInfPrx::uncheckedCast(__result->getProxy());
        ::RPCWiseFuse::FusionInf __ret;
        try
        {
            __ret = __proxy->end_fetchFuseRes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_WiseFusionInf_fetchFuseResPtr
newCallback_WiseFusionInf_fetchFuseRes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fetchFuseRes<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WiseFusionInf_fetchFuseResPtr
newCallback_WiseFusionInf_fetchFuseRes(T* instance, void (T::*cb)(const ::RPCWiseFuse::FusionInf&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WiseFusionInf_fetchFuseRes<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
