// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `qualityjudgeRpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __qualityjudgeRpc_h__
#define __qualityjudgeRpc_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RPCQualityJudge
{

class QualityInf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RPCQualityJudge::QualityInf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RPCQualityJudge::QualityInf*);

}

}

namespace RPCQualityJudge
{

class QualityInf;
bool operator==(const QualityInf&, const QualityInf&);
bool operator<(const QualityInf&, const QualityInf&);
::Ice::Object* upCast(::RPCQualityJudge::QualityInf*);
typedef ::IceInternal::Handle< ::RPCQualityJudge::QualityInf> QualityInfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RPCQualityJudge::QualityInf> QualityInfPrx;
void __patch(QualityInfPtr&, const ::Ice::ObjectPtr&);

}

namespace RPCQualityJudge
{

typedef ::std::vector< ::Ice::Double> DataArray;

typedef ::std::map< ::std::string, ::RPCQualityJudge::DataArray> DatasMap;

struct QualityInfo
{
    ::Ice::Int status;
    ::RPCQualityJudge::DatasMap imgsquality;
};

struct ImageParameter
{
    ::std::string filePath;
    ::std::string bandIdList;

    bool operator==(const ImageParameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(filePath != __rhs.filePath)
        {
            return false;
        }
        if(bandIdList != __rhs.bandIdList)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageParameter& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(filePath < __rhs.filePath)
        {
            return true;
        }
        else if(__rhs.filePath < filePath)
        {
            return false;
        }
        if(bandIdList < __rhs.bandIdList)
        {
            return true;
        }
        else if(__rhs.bandIdList < bandIdList)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageParameter& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageParameter& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageParameter& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageParameter& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RPCQualityJudge::ImageParameter> QualityMapArgs;

struct QualityInputStruct
{
    ::std::string id;
    ::std::string algorithmkind;
    ::RPCQualityJudge::QualityMapArgs inputMap;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RPCQualityJudge::QualityInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCQualityJudge::QualityInfo, S>
{
    static void write(S* __os, const ::RPCQualityJudge::QualityInfo& v)
    {
        __os->write(v.status);
        __os->write(v.imgsquality);
    }
};

template<class S>
struct StreamReader< ::RPCQualityJudge::QualityInfo, S>
{
    static void read(S* __is, ::RPCQualityJudge::QualityInfo& v)
    {
        __is->read(v.status);
        __is->read(v.imgsquality);
    }
};

template<>
struct StreamableTraits< ::RPCQualityJudge::ImageParameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCQualityJudge::ImageParameter, S>
{
    static void write(S* __os, const ::RPCQualityJudge::ImageParameter& v)
    {
        __os->write(v.filePath);
        __os->write(v.bandIdList);
    }
};

template<class S>
struct StreamReader< ::RPCQualityJudge::ImageParameter, S>
{
    static void read(S* __is, ::RPCQualityJudge::ImageParameter& v)
    {
        __is->read(v.filePath);
        __is->read(v.bandIdList);
    }
};

template<>
struct StreamableTraits< ::RPCQualityJudge::QualityInputStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RPCQualityJudge::QualityInputStruct, S>
{
    static void write(S* __os, const ::RPCQualityJudge::QualityInputStruct& v)
    {
        __os->write(v.id);
        __os->write(v.algorithmkind);
        __os->write(v.inputMap);
    }
};

template<class S>
struct StreamReader< ::RPCQualityJudge::QualityInputStruct, S>
{
    static void read(S* __is, ::RPCQualityJudge::QualityInputStruct& v)
    {
        __is->read(v.id);
        __is->read(v.algorithmkind);
        __is->read(v.inputMap);
    }
};

}

namespace RPCQualityJudge
{

class Callback_QualityInf_qualitySyn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QualityInf_qualitySyn_Base> Callback_QualityInf_qualitySynPtr;

class Callback_QualityInf_qualityAsyn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QualityInf_qualityAsyn_Base> Callback_QualityInf_qualityAsynPtr;

class Callback_QualityInf_fetchQualityRes_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QualityInf_fetchQualityRes_Base> Callback_QualityInf_fetchQualityResPtr;

}

namespace IceProxy
{

namespace RPCQualityJudge
{

class QualityInf : virtual public ::IceProxy::Ice::Object
{
public:

    ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs)
    {
        return qualitySyn(inputArgs, 0);
    }
    ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx)
    {
        return qualitySyn(inputArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_qualitySyn(inputArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_qualitySyn(inputArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_qualitySyn(inputArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_qualitySyn(inputArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCQualityJudge::QualityInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
                ::RPCQualityJudge::QualityInfo __ret;
                try
                {
                    __ret = __proxy->end_qualitySyn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCQualityJudge::QualityInfo&)> _response;
        };
        return begin_qualitySyn(inputArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs)
    {
        return begin_qualitySyn(inputArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx)
    {
        return begin_qualitySyn(inputArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualitySyn(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualitySyn(inputArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::RPCQualityJudge::Callback_QualityInf_qualitySynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualitySyn(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::RPCQualityJudge::Callback_QualityInf_qualitySynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualitySyn(inputArgs, &__ctx, __del, __cookie);
    }

    ::RPCQualityJudge::QualityInfo end_qualitySyn(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs)
    {
        return qualityAsyn(inputArgs, 0);
    }
    ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx)
    {
        return qualityAsyn(inputArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_qualityAsyn(inputArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_qualityAsyn(inputArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_qualityAsyn(inputArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_qualityAsyn(inputArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_qualityAsyn(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_qualityAsyn(inputArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs)
    {
        return begin_qualityAsyn(inputArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx)
    {
        return begin_qualityAsyn(inputArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualityAsyn(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualityAsyn(inputArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::RPCQualityJudge::Callback_QualityInf_qualityAsynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualityAsyn(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct& inputArgs, const ::Ice::Context& __ctx, const ::RPCQualityJudge::Callback_QualityInf_qualityAsynPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_qualityAsyn(inputArgs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_qualityAsyn(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string& inputArgs)
    {
        return fetchQualityRes(inputArgs, 0);
    }
    ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx)
    {
        return fetchQualityRes(inputArgs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fetchQualityRes(const ::std::string& inputArgs, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchQualityRes(inputArgs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchQualityRes(const ::std::string& inputArgs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchQualityRes(inputArgs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchQualityRes(inputArgs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchQualityRes(inputArgs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RPCQualityJudge::QualityInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RPCQualityJudge::QualityInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
                ::RPCQualityJudge::QualityInfo __ret;
                try
                {
                    __ret = __proxy->end_fetchQualityRes(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RPCQualityJudge::QualityInfo&)> _response;
        };
        return begin_fetchQualityRes(inputArgs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs)
    {
        return begin_fetchQualityRes(inputArgs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx)
    {
        return begin_fetchQualityRes(inputArgs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchQualityRes(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchQualityRes(inputArgs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs, const ::RPCQualityJudge::Callback_QualityInf_fetchQualityResPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchQualityRes(inputArgs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string& inputArgs, const ::Ice::Context& __ctx, const ::RPCQualityJudge::Callback_QualityInf_fetchQualityResPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchQualityRes(inputArgs, &__ctx, __del, __cookie);
    }

    ::RPCQualityJudge::QualityInfo end_fetchQualityRes(const ::Ice::AsyncResultPtr&);
    
private:

    ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fetchQualityRes(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<QualityInf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_secure(bool __secure) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_twoway() const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_oneway() const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_batchOneway() const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_datagram() const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_batchDatagram() const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_compress(bool __compress) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<QualityInf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<QualityInf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RPCQualityJudge
{

class QualityInf : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RPCQualityJudge
{

class QualityInf : virtual public ::IceDelegate::RPCQualityJudge::QualityInf,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RPCQualityJudge
{

class QualityInf : virtual public ::IceDelegate::RPCQualityJudge::QualityInf,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RPCQualityJudge
{

class QualityInf : virtual public ::Ice::Object
{
public:

    typedef QualityInfPrx ProxyType;
    typedef QualityInfPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RPCQualityJudge::QualityInfo qualitySyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___qualitySyn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int qualityAsyn(const ::RPCQualityJudge::QualityInputStruct&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___qualityAsyn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RPCQualityJudge::QualityInfo fetchQualityRes(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fetchQualityRes(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const QualityInf& l, const QualityInf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const QualityInf& l, const QualityInf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RPCQualityJudge
{

template<class T>
class CallbackNC_QualityInf_qualitySyn : public Callback_QualityInf_qualitySyn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCQualityJudge::QualityInfo&);

    CallbackNC_QualityInf_qualitySyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::RPCQualityJudge::QualityInfo __ret;
        try
        {
            __ret = __proxy->end_qualitySyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_QualityInf_qualitySynPtr
newCallback_QualityInf_qualitySyn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_qualitySyn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QualityInf_qualitySynPtr
newCallback_QualityInf_qualitySyn(T* instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_qualitySyn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QualityInf_qualitySyn : public Callback_QualityInf_qualitySyn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCQualityJudge::QualityInfo&, const CT&);

    Callback_QualityInf_qualitySyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::RPCQualityJudge::QualityInfo __ret;
        try
        {
            __ret = __proxy->end_qualitySyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_QualityInf_qualitySynPtr
newCallback_QualityInf_qualitySyn(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_qualitySyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QualityInf_qualitySynPtr
newCallback_QualityInf_qualitySyn(T* instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_qualitySyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QualityInf_qualityAsyn : public Callback_QualityInf_qualityAsyn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_QualityInf_qualityAsyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_qualityAsyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_QualityInf_qualityAsynPtr
newCallback_QualityInf_qualityAsyn(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_qualityAsyn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QualityInf_qualityAsynPtr
newCallback_QualityInf_qualityAsyn(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_qualityAsyn<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QualityInf_qualityAsyn : public Callback_QualityInf_qualityAsyn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_QualityInf_qualityAsyn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_qualityAsyn(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_QualityInf_qualityAsynPtr
newCallback_QualityInf_qualityAsyn(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_qualityAsyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QualityInf_qualityAsynPtr
newCallback_QualityInf_qualityAsyn(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_qualityAsyn<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QualityInf_fetchQualityRes : public Callback_QualityInf_fetchQualityRes_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RPCQualityJudge::QualityInfo&);

    CallbackNC_QualityInf_fetchQualityRes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::RPCQualityJudge::QualityInfo __ret;
        try
        {
            __ret = __proxy->end_fetchQualityRes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_QualityInf_fetchQualityResPtr
newCallback_QualityInf_fetchQualityRes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_fetchQualityRes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QualityInf_fetchQualityResPtr
newCallback_QualityInf_fetchQualityRes(T* instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QualityInf_fetchQualityRes<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QualityInf_fetchQualityRes : public Callback_QualityInf_fetchQualityRes_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RPCQualityJudge::QualityInfo&, const CT&);

    Callback_QualityInf_fetchQualityRes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RPCQualityJudge::QualityInfPrx __proxy = ::RPCQualityJudge::QualityInfPrx::uncheckedCast(__result->getProxy());
        ::RPCQualityJudge::QualityInfo __ret;
        try
        {
            __ret = __proxy->end_fetchQualityRes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_QualityInf_fetchQualityResPtr
newCallback_QualityInf_fetchQualityRes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_fetchQualityRes<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QualityInf_fetchQualityResPtr
newCallback_QualityInf_fetchQualityRes(T* instance, void (T::*cb)(const ::RPCQualityJudge::QualityInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QualityInf_fetchQualityRes<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
